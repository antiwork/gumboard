generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                      String                        @id @default(cuid())
  name                    String?
  email                   String                        @unique
  emailVerified           DateTime?
  image                   String?
  createdAt               DateTime                      @default(now())
  updatedAt               DateTime                      @updatedAt
  organizationId          String?
  isAdmin                 Boolean                       @default(false)
  passwordHash            String?
  accounts                Account[]
  notes                   Note[]
  invitedOrganizations    OrganizationInvite[]
  createdSelfServeInvites OrganizationSelfServeInvite[]
  sessions                Session[]
  organization            Organization?                 @relation(fields: [organizationId], references: [id])

  @@index([organizationId], name: "idx_user_org")
  @@map("users")
}

model Organization {
  id               String                        @id @default(cuid())
  name             String
  createdAt        DateTime                      @default(now())
  updatedAt        DateTime                      @updatedAt
  slackWebhookUrl  String?
  boards           Board[]
  invites          OrganizationInvite[]
  selfServeInvites OrganizationSelfServeInvite[]
  members          User[]

  @@map("organizations")
}

model Board {
  id               String       @id @default(cuid())
  name             String
  description      String?
  organizationId   String
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isPublic         Boolean      @default(false)
  sendSlackUpdates Boolean      @default(true)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  notes            Note[]

  @@index([organizationId, createdAt], map: "idx_board_org_created")
  @@map("boards")
}

model Note {
  id             String          @id @default(cuid())
  color          String          @default("#fef3c7")
  boardId        String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      String
  deletedAt      DateTime?
  slackMessageId String?
  archivedAt     DateTime?
  checklistItems ChecklistItem[]
  board          Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([boardId, deletedAt], map: "idx_note_board_deleted")
  @@index([boardId, createdAt], map: "idx_note_board_created")
  @@index([createdBy, deletedAt], map: "idx_note_user_deleted")
  @@map("notes")
}

model ChecklistItem {
  id             String   @id @default(cuid())
  content        String
  checked        Boolean  @default(false)
  order          Int      @default(0)
  noteId         String
  slackMessageId String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  note           Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
  @@index([noteId, order])
  @@map("checklist_items")
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  invitedBy      String
  createdAt      DateTime     @default(now())
  status         InviteStatus @default(PENDING)
  user           User         @relation(fields: [invitedBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
  @@map("organization_invites")
}

model OrganizationSelfServeInvite {
  id             String       @id @default(cuid())
  name           String
  organizationId String
  createdBy      String
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?
  usageLimit     Int?
  usageCount     Int          @default(0)
  isActive       Boolean      @default(true)
  token          String?      @unique
  user           User         @relation(fields: [createdBy], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_self_serve_invites")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
