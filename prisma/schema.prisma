// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * Enums (NEW)
 * =========================
 */
enum OrgRole {
  OWNER
  ADMIN
  MEMBER
}

/**
 * =========================
 * NextAuth.js required models
 * =========================
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/**
 * =========================
 * User (ADD: activeOrganizationId + memberships)
 * =========================
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Legacy single-org pointer (kept for compatibility)
  organizationId String?
  isAdmin        Boolean       @default(false) // Admin role for organization
  organization   Organization? @relation("UserPrimaryOrg", fields: [organizationId], references: [id])

  // NEW: optional “active/last used” organization pointer
  activeOrganizationId String?
  activeOrganization   Organization? @relation("UserActiveOrg", fields: [activeOrganizationId], references: [id])

  invitedOrganizations    OrganizationInvite[]
  createdSelfServeInvites OrganizationSelfServeInvite[]
  notes                   Note[]

  // NEW: memberships back-relation
  memberships Membership[]

  @@index([organizationId], name: "idx_user_org")
  @@index([activeOrganizationId], name: "idx_user_active_org")
  @@map("users")
}

/**
 * =========================
 * Organization (ADD: memberships + activeUsers relation fields)
 * =========================
 */
model Organization {
  id              String   @id @default(cuid())
  name            String
  slackWebhookUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Legacy back-relation to users via User.organizationId
  members User[] @relation("UserPrimaryOrg")

  // NEW: users who have this org as their activeOrganization
  activeUsers User[] @relation("UserActiveOrg")

  // NEW: membership relation
  memberships Membership[]

  invites          OrganizationInvite[]
  boards           Board[]
  selfServeInvites OrganizationSelfServeInvite[]

  @@map("organizations")
}

/**
 * =========================
 * Membership (NEW)
 * =========================
 */
model Membership {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           OrgRole  @default(MEMBER)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId], name: "idx_membership_user")
  @@index([organizationId], name: "idx_membership_org")
  @@map("memberships")
}

/**
 * =========================
 * Existing models (unchanged)
 * =========================
 */
model Board {
  id               String       @id @default(cuid())
  name             String
  description      String?
  isPublic         Boolean      @default(false)
  sendSlackUpdates Boolean      @default(true)
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  notes            Note[]

  // Performance indexes
  @@index([organizationId, createdAt], name: "idx_board_org_created")
  @@map("boards")
}

model Note {
  id             String          @id @default(cuid())
  color          String          @default("#fef3c7") // Default yellow color
  checklistItems ChecklistItem[]
  archivedAt     DateTime? // Track archived status
  slackMessageId String?
  boardId        String
  board          Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  createdBy      String
  user           User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime? // Soft delete timestamp

  // Performance indexes
  @@index([boardId, deletedAt], name: "idx_note_board_deleted")
  @@index([boardId, createdAt], name: "idx_note_board_created")
  @@index([createdBy, deletedAt], name: "idx_note_user_deleted")
  @@map("notes")
}

model ChecklistItem {
  id             String   @id @default(cuid())
  content        String   @db.Text
  checked        Boolean  @default(false)
  order          Int      @default(0)
  noteId         String
  slackMessageId String?
  note           Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([noteId])
  @@index([noteId, order])
  @@map("checklist_items")
}

model OrganizationInvite {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedBy      String
  user           User         @relation(fields: [invitedBy], references: [id])
  createdAt      DateTime     @default(now())
  status         InviteStatus @default(PENDING)

  @@unique([email, organizationId])
  @@map("organization_invites")
}

model OrganizationSelfServeInvite {
  id             String       @id @default(cuid())
  token          String?      @unique // Cryptographically secure token for the URL
  name           String // Name/description for the invite link
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  user           User         @relation(fields: [createdBy], references: [id])
  createdAt      DateTime     @default(now())
  expiresAt      DateTime? // Optional expiration date
  usageLimit     Int? // Optional usage limit
  usageCount     Int          @default(0) // Track how many times it's been used
  isActive       Boolean      @default(true)

  @@map("organization_self_serve_invites")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
